* Conan Recipes for many C++ Packages 
** Install all conan recipes 

Enter in this directory and run the command: 

#+BEGIN_SRC sh 
  $ make install 
#+END_SRC

** Create a new recipe 

Create recipe project skeleton: 

#+BEGIN_SRC sh 
  $ mkdir -p recipes/<RECIPE_NAME> && cd recipes/<RECIPE_NAME> 
  $ conan new <RECIPE_NAME>/<VERSION> -t 
#+END_SRC

Example: 

#+BEGIN_SRC sh 
  $ mkdir -p recipes/mylibrary && cd recipes/mylibrary 
  $ conan new mylibrary/0.1 -t 
#+END_SRC

* Recipes 
** Package cpp-httplib - header-only http server 
*** Overview 

The library *cpp-httplib* is a single-file header-only cross-platform
library for building HTTP/HTTPS standalone servers. 

 + Repository: https://github.com/yhirose/cpp-httplib

 + Conan recipe: [[file:recipes/httplib][file:recipes/httplib]]
*** Testing package

Enter package directory 

#+BEGIN_SRC sh 
  $ cd cpp-httplib && conan create . recipes/httplibtesting
#+END_SRC

This command downloads the library source from the remote repository;
installs the library in the local cache package directory and then
runs the test executable [[file:recipes/httplib/test_package/example.cpp][file:recipes/httplib/test_package/example.cpp]],

File: example.cpp 

#+BEGIN_SRC cpp 
  #include <iostream> 
  #include <httplib.h>

  int main(void)
  {
      using namespace httplib;

      std::puts("\n\n ===================================");
      std::puts(" [INFO] Starting Web server. OK");
    
      Server svr;

      svr.Get("/hi", [](const Request& req, Response& res) {
          std::puts(" [INFO] Server route /hi");
          res.set_content("Hello World!", "text/plain");
      });

      svr.Get(R"(/numbers/(\d+))", [&](const Request& req, Response& res) {
          std::puts(" [INFO] Server route /numbers");			  
          auto numbers = req.matches[1];
          res.set_content(numbers, "text/plain");
      });

      svr.Get("/stop", [&](const Request& req, Response& res) {
          std::puts(" [INFO] Server route /stop");			  
          svr.stop();
      });

      std::puts(" [INFO] Running server - listening port 1234");			  
      svr.listen("localhost", 1234);
  }
#+END_SRC

If the command runs successfuly, the executable 'example' shows the
following message: 

#+BEGIN_SRC sh 
  Scanning dependencies of target example
  [ 50%] Building CXX object CMakeFiles/example.dir/example.cpp.o
  [100%] Linking CXX executable bin/example
  [100%] Built target example
  recipes/httplib0.1@cpp-httplib/testing (test package): Running test()


   ===================================
   [INFO] Starting Web server. OK
   [INFO] Running server - listening port 1234
#+END_SRC

Testing with curl in another terminal: 
 
 + Route: /hi => URL ~http://localhost:1234/hi~ 

#+BEGIN_SRC sh 
  $ curl -v localhost:1234/hi

  *   Trying ::1...
  * TCP_NODELAY set
  * Connected to localhost (::1) port 1234 (#0)
  > GET /hi HTTP/1.1
  > Host: localhost:1234
  > User-Agent: curl/7.59.0
  > Accept: */*
  > 
  < HTTP/1.1 200 OK
  < Accept-Ranges: bytes
  < Content-Length: 12
  < Content-Type: text/plain
  < 
  * Connection #0 to host localhost left intact
  Hello World!
#+END_SRC

 + Route: /numbers/<NUMBER> => url: http://localhost:1234/numbers/2431 

#+BEGIN_SRC sh 
  $ curl -v localhost:1234/numbers/2431
  *   Trying ::1...
  * TCP_NODELAY set
  * Connected to localhost (::1) port 1234 (#0)
  > GET /numbers/2431 HTTP/1.1
  > Host: localhost:1234
  > User-Agent: curl/7.59.0
  > Accept: */*
  > 
  < HTTP/1.1 200 OK
  < Accept-Ranges: bytes
  < Content-Length: 4
  < Content-Type: text/plain
  < 
  * Connection #0 to host localhost left intact
  2431
#+END_SRC

*** Installing Locally 

Conan reference for package: 
  + *cpp-httplib/0.1@local/testing*

Run the command: 

#+BEGIN_SRC sh 
  $ make install-httplib
#+END_SRC

Output: 

#+BEGIN_SRC sh 
  $ make install
  conan export ./recipes/httplib local/testing 
  Exporting package recipe
  Linter warnings
      WARN: Linter. Line 1: Unused import os
      WARN: Linter. Line 2: Unused CMake imported from conans
      WARN: Linter. Line 2: Unused tools imported from conans
  cpp-httplib/0.1@local/testing: A new conanfile.py version was exported
  cpp-httplib/0.1@local/testing: Folder: /home/archbox/.conan/data/cpp-httplib/0.1/local/testing/export
#+END_SRC

Checking Local Installation: 

#+BEGIN_SRC sh 
  $ conan info cpp-httplib/0.1@local/testing
  cpp-httplib/0.1@local/testing
      ID: 5ab84d6acfe1f23c4fae0ab88f26e3a396351ac9
      BuildID: None
      Remote: None
      URL: <Package recipe repository url here, for issues about the package>
      License: Public Domain Package Recipe
      Author: Caio Rodrigues
      Topics: http, web, server
      Recipe: Cache
      Binary: Missing
      Binary remote: None
      Creation date: 2019-08-19 14:06:24
#+END_SRC

*** Building sample project 

Note: It assumes that the package has already been installed with: 

#+BEGIN_SRC sh 
  $ make install-httplib 
#+END_SRC

 + Project directory: [[file:sample-projects/httplib][file:sample-projects/httplib]] 

File: CMakeLists.txt 

#+BEGIN_SRC cmake 
   cmake_minimum_required(VERSION 3.14 FATAL_ERROR)
   project(cmake-experiment)

   set(CMAKE_CXX_STANDARD 17)
   set(CMAKE_VERBOSE_MAKEFILE ON)

   # ============= Conan Bootstrap =============================#

   # Download automatically, you can also just copy the conan.cmake file
   if(NOT EXISTS "${CMAKE_BINARY_DIR}/conan.cmake")
      message(STATUS "Downloading conan.cmake from https://github.com/conan-io/cmake-conan")
      file(DOWNLOAD "https://github.com/conan-io/cmake-conan/raw/v0.13/conan.cmake"
                    "${CMAKE_BINARY_DIR}/conan.cmake")
   endif()

   include(${CMAKE_BINARY_DIR}/conan.cmake)

   conan_cmake_run( REQUIRES
                   # Libraries to be installed locally
                   cpp-httplib/0.1@local/testing

                   BASIC_SETUP
                   BUILD missing
                   )

   #  ========= Target Configuration ==================== #

   add_executable(server server.cpp)
   target_link_libraries(server pthread)
#+END_SRC

File: server.cpp 

#+BEGIN_SRC cpp 
  #include <iostream> 
  #include <httplib.h>

  int main(void)
  {
      using namespace httplib;

      std::puts("\n\n ===================================");
      std::puts(" [INFO] Starting Web server. OK");
    
      Server svr;

      svr.Get("/hi", [](const Request& req, Response& res) {
          std::puts(" [INFO] Server route /hi");
          res.set_content("Hello World!", "text/plain");
      });

      svr.Get(R"(/numbers/(\d+))", [&](const Request& req, Response& res) {
          std::puts(" [INFO] Server route /numbers");			  
          auto numbers = req.matches[1];
          res.set_content(numbers, "text/plain");
      });

      svr.Get("/stop", [&](const Request& req, Response& res) {
          std::puts(" [INFO] Server route /stop");			  
          svr.stop();
      });

      std::puts(" [INFO] Running server - listening port 1234");			  
      svr.listen("localhost", 1234);
  }
#+END_SRC

Build project: 

#+BEGIN_SRC sh 
  $ cd sample-projects/httplib 
  $ cmake -H. -B_build -DCMAKE_BUILD_TYPE=Debug
  $ cmake --build _build --target  
#+END_SRC

Run Server: 

#+BEGIN_SRC sh 
  $ _build/bin/server 

   ===================================
   [INFO] Starting Web server. OK
   [INFO] Running server - listening port 1234
#+END_SRC
